plugins {
    id 'java-library'
}

description = "JGiven core module"

dependencies {
    api "com.google.guava:guava:$guavaVersion"
    api "com.google.code.gson:gson:$gsonVersion"
    implementation "com.thoughtworks.paranamer:paranamer:$paranamerVersion"
    implementation "net.bytebuddy:byte-buddy:$bytebuddyVersion"
    implementation "org.fusesource.jansi:jansi:$jansiVersion"
}

def generatedSourceDir = "generatedSrc/java"

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", generatedSourceDir]
        }
    }
}

def buildNumber = getCheckedOutGitCommitHash()

println 'BUILD SHA1: ' + buildNumber

processResources {
    include "**/jgiven-version.properties"
    expand(
        'version': project.version,
        'buildNumber': buildNumber
    )
}

files { file("src/main/translations").listFiles() }.collect {
    def pkg=it.getName().split("\\.")[0]

    def props = new Properties()
    it.withInputStream { props.load(it) }
    props.pkg=pkg
    def taskName = pkg+'Translation'

    tasks.create(name: taskName, type: Copy) {
        from 'src/main/templates'
        into generatedSourceDir + "/com/tngtech/jgiven/lang/" + pkg
        rename("Stage.template",props.stage_class+".java")
        rename("ScenarioTestBase.template",props.scenario_test_base_class+".java")
        expand(props)
        filteringCharset = 'UTF-8'
    }
    compileJava.dependsOn += taskName
}

/**
 * Copied from https://gist.github.com/JonasGroeger/7620911
 * Author: Jonas Groeger
 */
def getCheckedOutGitCommitHash() {
    def gitFolder = "${rootProject.projectDir}/.git/"
    def takeFromHash = 12
    /*
     * '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash
     *      otherwise: a reference to a file containing the current commit hash
     */
    def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd

    if(isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb

    def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
    refHead.text.trim().take takeFromHash
}
