plugins {
    id 'com.github.kt3k.coveralls' version '2.12.0'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'io.codearte.nexus-staging' version '0.30.0'
    id 'com.github.ben-manes.versions' version '0.38.0'
    id 'org.sonarqube' version '3.2.0' apply false
    id 'com.github.node-gradle.node' version '3.1.0' apply false
}

apply plugin: 'project-report'

description = 'JGiven - BDD in plain Java'
def jacocoEnabled = !JavaVersion.current().isJava11Compatible()

allprojects {
    group = 'com.tngtech.jgiven'
    version = version
    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
    if (jacocoEnabled) {
        apply plugin: 'jacoco'
    }
    repositories {
        jcenter()
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    ext.sonatypeUsername = (rootProject.hasProperty('sonatypeUsername')) ?
            rootProject.sonatypeUsername :
            System.getenv().getOrDefault("SONATYPE_USERNAME", "")
    ext.sonatypePassword = (rootProject.hasProperty('sonatypePassword')) ?
            rootProject.sonatypePassword :
            System.getenv().getOrDefault("SONATYPE_PASSWORD", "")
}

asciidoctor {
    baseDir = file('docs')
    sourceDir = file('docs')
    attributes 'version': version
}

nexusStaging {
    stagingProfileId = stagingProfileId // stagingProfileId must be defined externally
    packageGroup = 'com.tngtech'
    username = sonatypeUsername
    password = sonatypePassword
    numberOfRetries = 100
}

subprojects {
    ext {
        junitDataproviderVersion = '1.13.1'
        // set default junit version if not set via command line
        junitVersion = rootProject.hasProperty('junitVersion') ? rootProject.junitVersion : '4.13.1'
        junit5Version = '5.7.1'
        junit5PlatformRunnerVersion = '1.7.0'
        junitParamsVersion = '1.1.1'
        testngVersion = '7.3.0'
        assertjVersion = '3.19.0'
        slf4jVersion = '1.7.30'
        bytebuddyVersion = '1.11.0'
        paranamerVersion = '2.8'
        jansiVersion = '1.18'
        gsonVersion = '2.8.6'
        guavaVersion = '30.1.1-jre'
        guavaAndroidVersion = '28.1-android'
        springVersion = '5.3.7'
        jacocoVersion = '0.8.5'
        quickcheckVersion = '0.6'
        hsqldbVersion = '2.3.2'
        byteBuddyVersion = '1.10.2'
        androidGradleVersion = '3.1.0'
        androidCompileSdkVersion = 27
        androidBuildToolsVersion = '27.0.2'

        publishVariant = { String variant ->
            publishing {
                publications {
                    maven(MavenPublication) {
                        from components[variant]
                        pom {
                            name = project.name
                            url = 'http://jgiven.org'
                            // to be able use project.description which may be overridden in later executed build.gradle of subproject
                            afterEvaluate {
                                description = project.description
                            }
                            withXml {
                                project.configurations.compileOnly.allDependencies.each { dep ->
                                    asNode().dependencies[0].appendNode('dependency').with {
                                        it.appendNode('groupId', dep.group)
                                        it.appendNode('artifactId', dep.name)
                                        it.appendNode('version', dep.version)
                                        it.appendNode('scope', 'provided')
                                    }
                                }

                            }

                            scm {
                                url = 'scm:git@github.com:TNG/jgiven.git'
                                connection = 'scm:git@github.com:TNG/jgiven.git'
                                developerConnection = 'scm:git@github.com:TNG/jgiven.git'
                            }

                            licenses {
                                license {
                                    name = 'The Apache Software License, Version 2.0'
                                    url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                    distribution = 'repo'
                                }
                            }

                            developers {
                                developer {
                                    id = 'janschaefer'
                                    name = 'Jan Sch√§fer'
                                }
                                developer {
                                    id = 'l-1squared'
                                    name = 'Kristof Karhan'
                                }
                            }

                        }
                    }
                }
                repositories {
                    maven {
                        String releaseUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                        String snapshotUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
                        url = System.env.RELEASE == "true" ? releaseUrl : snapshotUrl
                        credentials {
                            username = sonatypeUsername
                            password = sonatypePassword
                        }
                    }
                }
            }
        }
    }
}

configure(subprojects.findAll { !it.name.contains("android") }) {
    apply plugin: 'java'
    apply plugin: 'org.asciidoctor.jvm.convert'
    apply plugin: 'maven-publish'

    sourceCompatibility = targetCompatibility = 1.8

    dependencies {
        implementation "org.slf4j:slf4j-api:$slf4jVersion"

        testImplementation "org.slf4j:jcl-over-slf4j:$slf4jVersion"
        testImplementation "org.slf4j:slf4j-simple:$slf4jVersion"
        testImplementation "junit:junit:$junitVersion"
        testImplementation "org.assertj:assertj-core:$assertjVersion"
        testImplementation "com.tngtech.java:junit-dataprovider:$junitDataproviderVersion"
        testImplementation "net.java.quickcheck:quickcheck:$quickcheckVersion"
    }

    test {
        systemProperty 'jgiven.report.dir', 'build/reports/jgiven/json'
        systemProperty 'jgiven.report.text', 'false'
        systemProperty 'org.slf4j.simpleLogger.defaultLogLevel', 'warn'

        if (jacocoEnabled) {
            jacoco {
                destinationFile = file("${rootProject.projectDir}/build/jacoco/jacocoTest.exec")
                classDumpDir = file("${rootProject.projectDir}/build/jacoco/classpathdumps")
            }
        }

        testLogging {
            showStandardStreams = true
        }
    }

    tasks.withType(JavaCompile) {
        // needed for DeSzenarioTest.java as it has Umlauts in the code
        options.encoding = 'UTF-8'
    }

    tasks.withType(Jar) {
        def now = new Date()
        manifest = project.manifest().attributes(
                'Built-By': "Gradle ${gradle.gradleVersion}",
                'Build-Date': now.format('yyyy-MM-dd HH:mm:ss.S'),
                'Copyright': "2013-" + now.format('yyyy') + " TNG Technology Consulting GmbH",
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'TNG Technology Consulting GmbH',
                'License': 'Apache License v2.0, January 2004',
                'Specification-Title': project.name,
                'Specification-Version': project.version,
                'Specification-Vendor': 'TNG Technology Consulting GmbH',
        )
    }

    normalization {
        runtimeClasspath {
            ignore "META-INF/MANIFEST.MF"
        }
    }

    javadoc {
        exclude '**/impl/**'

        onlyIf {
            JavaVersion.current().isJava8Compatible()
        }
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    if (jacocoEnabled) {
        jacocoTestReport {
            reports {
                xml.enabled = true // coveralls plugin depends on xml format report
            }
        }
    }

    task jgivenHtml5Report(type: JavaExec) {
        main = 'com.tngtech.jgiven.report.ReportGenerator'
        args '--sourceDir=build/reports/jgiven/json',
                '--targetDir=build/reports/jgiven/html5',
                '--format=html5',
                '--exclude-empty-scenarios=true',
                '--customcss=build/resources/test/jgiven/custom.css',
                '--show-thumbnails=true'

        classpath = configurations.testRuntimeClasspath
    }

    task jgivenAsciiDocReport(type: JavaExec) {
        main = 'com.tngtech.jgiven.report.ReportGenerator'
        args '--sourceDir=build/reports/jgiven/json',
                '--targetDir=build/reports/jgiven/asciidoc',
                '--format=asciidoc'

        classpath = configurations.testRuntimeClasspath
    }

    asciidoctor {
        sourceDir = new File('build/reports/jgiven/asciidoc')
        outputDir = new File('build/reports/jgiven/htmladoc')
        attributes toc: ''
    }

    task copyAsciiDoc(type: Copy, dependsOn: jgivenAsciiDocReport) {
        from 'src/asciidoc'
        into 'build/reports/jgiven/asciidoc'
    }

    copyAsciiDoc.finalizedBy(asciidoctor)

    project.ext.publishVariant('java')
}

configure(subprojects) {
    apply plugin: 'checkstyle'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'

    description "${rootProject.description} - Module ${project.name}"

    if (JavaVersion.current().isJava8Compatible()) {
        apply plugin: 'org.sonarqube'
        sonarqube {
            properties {
                property "sonar.jacoco.reportPath", "${rootProject.projectDir}/build/jacoco/jacocoTest.exec"
            }
        }
    }

    checkstyle {
        toolVersion = 8.41
        configFile = file("${rootProject.projectDir}/checkstyle.xml")
        showViolations = false
        ignoreFailures = true
    }

    // -- build and publish artifacts -------------------------------------------------------------------------------------

    signing {
        // requires gradle.properties, see http://www.gradle.org/docs/current/userguide/signing_plugin.html
        required {
            isReleaseVersion && gradle.taskGraph.getAllTasks().any { it instanceof PublishToMavenRepository }
        }
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications
    }

    idea {
        module {
            downloadSources = true
            downloadJavadoc = true
        }
    }
}

task overallJacocoReport(type: JacocoReport) {
    getExecutionData().setFrom files("build/jacoco/jacocoTest.exec")
    getSourceDirectories().setFrom files("jgiven-core/src/main/java")
    getClassDirectories().setFrom files("jgiven-core/build/classes/main")
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

overallJacocoReport.dependsOn {
    subprojects*.test
}

coveralls.jacocoReportPath = 'build/reports/jacoco/overallJacocoReport/overallJacocoReport.xml'
coveralls.sourceDirs = ["jgiven-core/src/main/java"]
coveralls.saveAsFile = true
