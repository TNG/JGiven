plugins {
    id 'com.github.kt3k.coveralls' version '2.8.4'
    id 'org.asciidoctor.jvm.convert' version '2.3.0'
    id 'io.codearte.nexus-staging' version '0.21.1'
    id 'com.github.ben-manes.versions' version '0.27.0'
    id "org.sonarqube" version "2.8" apply false
}

apply plugin: 'project-report'

description = 'JGiven - BDD in plain Java'
def jacocoEnabled = !JavaVersion.current().isJava11Compatible();

wrapper {
    gradleVersion = '6.0'
    distributionType = Wrapper.DistributionType.ALL
}

allprojects {
    group = 'com.tngtech.jgiven'
    version = version
    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
    ext.isCI = System.env.CI == "true"
    if (jacocoEnabled) {
        apply plugin: 'jacoco'
    }
    repositories {
        jcenter()
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

asciidoctor {
    sourceDir = file('docs')
    attributes 'version': version
}

nexusStaging {
    stagingProfileId = stagingProfileId // stagingProfileId must be defined externally
    packageGroup = 'com.tngtech'
}

subprojects {
    ext {
        junitDataproviderVersion = '1.13.1'
        // set default junit version if not set via command line
        junitVersion = rootProject.hasProperty('junitVersion') ? rootProject.junitVersion : '4.12'
        junit5Version = '5.3.2'
        junit5PlatformRunnerVersion = '1.3.2'
        junitParamsVersion = '1.0.5'
        testngVersion = '6.9.12'
        assertjVersion = '3.14.0'
        slf4jVersion = '1.7.25'
        bytebuddyVersion = '1.10.3'
        paranamerVersion = '2.8'
        jansiVersion = '1.15'
        gsonVersion = '2.8.6'
        guavaVersion = '28.1-jre'
        springVersion = '5.2.1.RELEASE'
        jacocoVersion = '0.8.5'
        quickcheckVersion = '0.6'
        hsqldbVersion = '2.3.2'
    }
}

configure(subprojects.findAll { !it.name.contains("android") }) {
    apply plugin: 'java'
    apply plugin: 'org.asciidoctor.jvm.convert'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'

    sourceCompatibility = targetCompatibility = 1.8

    dependencies {
        implementation "org.slf4j:slf4j-api:$slf4jVersion"

        testImplementation "org.slf4j:jcl-over-slf4j:$slf4jVersion"
        testImplementation "org.slf4j:slf4j-simple:$slf4jVersion"
        testImplementation "junit:junit:$junitVersion"
        testImplementation "org.assertj:assertj-core:$assertjVersion"
        testImplementation "com.tngtech.java:junit-dataprovider:$junitDataproviderVersion"
        testImplementation "net.java.quickcheck:quickcheck:$quickcheckVersion"
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }

    test {
        systemProperty 'jgiven.report.dir', 'build/reports/jgiven/json'
        systemProperty 'jgiven.report.text', 'false'
        systemProperty 'org.slf4j.simpleLogger.defaultLogLevel', 'warn'

        if (jacocoEnabled) {
            jacoco {
                destinationFile = file("${rootProject.projectDir}/build/jacoco/jacocoTest.exec")
                classDumpDir = file("${rootProject.projectDir}/build/jacoco/classpathdumps")
            }
        }

        testLogging {
            showStandardStreams = true
        }
    }

    tasks.withType(JavaCompile) {
        // needed for DeSzenarioTest.java as it has Umlauts in the code
        options.encoding = 'UTF-8'
    }

    tasks.withType(Jar) {
        def now = new Date()
        manifest = project.manifest().attributes(
                'Built-By': "Gradle ${gradle.gradleVersion}",
                'Build-Date': now.format('yyyy-MM-dd HH:mm:ss.S'),
                'Copyright': "2013-" + now.format('yyyy') + " TNG Technology Consulting GmbH",
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'TNG Technology Consulting GmbH',
                'License': 'Apache License v2.0, January 2004',
                'Specification-Title': project.name,
                'Specification-Version': project.version,
                'Specification-Vendor': 'TNG Technology Consulting GmbH',
        )
    }

    normalization {
        runtimeClasspath {
            ignore "META-INF/MANIFEST.MF"
        }
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    javadoc {
        exclude '**/impl/**'
    }

    javadoc.onlyIf {
        JavaVersion.current().isJava8Compatible()
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }

    if (jacocoEnabled) {
        jacocoTestReport {
            reports {
                xml.enabled = true // coveralls plugin depends on xml format report
            }
        }
    }

    task jgivenHtml5Report(type: JavaExec) {
        main = 'com.tngtech.jgiven.report.ReportGenerator'
        args '--sourceDir=build/reports/jgiven/json',
                '--targetDir=build/reports/jgiven/html5',
                '--format=html5',
                '--exclude-empty-scenarios=true',
                '--customcss=build/resources/test/jgiven/custom.css',
                '--show-thumbnails=true'

        classpath = configurations.testCompile
    }

    task jgivenAsciiDocReport(type: JavaExec) {
        main = 'com.tngtech.jgiven.report.ReportGenerator'
        args '--sourceDir=build/reports/jgiven/json',
                '--targetDir=build/reports/jgiven/asciidoc',
                '--format=asciidoc'

        classpath = configurations.testCompile
    }

    asciidoctor {
        sourceDir = new File('build/reports/jgiven/asciidoc')
        outputDir = new File('build/reports/jgiven/htmladoc')
        attributes toc: ''
    }

    task copyAsciiDoc(type: Copy, dependsOn: jgivenAsciiDocReport) {
        from 'src/asciidoc'
        into 'build/reports/jgiven/asciidoc'
    }

    copyAsciiDoc.finalizedBy(asciidoctor)
}

configure(subprojects) {
    apply plugin: 'checkstyle'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'

    description "${rootProject.description} - Module ${project.name}"

    if (JavaVersion.current().isJava8Compatible()) {
        apply plugin: 'org.sonarqube'
        sonarqube {
            properties {
                property "sonar.jacoco.reportPath", "${rootProject.projectDir}/build/jacoco/jacocoTest.exec"
            }
        }
    }

    checkstyle {
        toolVersion '8.19'
        configFile = file("${rootProject.projectDir}/develop/checkstyle-rules.xml")
        showViolations = false
        ignoreFailures = true
    }

    // -- build and publish artifacts -------------------------------------------------------------------------------------

    signing {
        // requires gradle.properties, see http://www.gradle.org/docs/current/userguide/signing_plugin.html
        required {
            isReleaseVersion && gradle.taskGraph.hasTask('uploadArchives')
        }
        sign configurations.archives
    }

    ext {
        sonatypeUsername = (rootProject.hasProperty('sonatypeUsername')) ?
                rootProject.sonatypeUsername :
                "$System.env.SONATYPE_USERNAME"

        sonatypePassword = (rootProject.hasProperty('sonatypePassword')) ?
                rootProject.sonatypePassword :
                "$System.env.SONATYPE_PASSWORD"
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { deployment ->
                    signing.signPom(deployment)
                }
                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                    // username and password from gradle.properties
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
                snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
                pom {
                    project {
                        name project.name
                        url 'http://jgiven.org'

                        scm {
                            url 'scm:git@github.com:TNG/jgiven.git'
                            connection 'scm:git@github.com:TNG/jgiven.git'
                            developerConnection 'scm:git@github.com:TNG/jgiven.git'
                        }

                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id 'janschaefer'
                                name 'Jan SchÃ¤fer'
                            }
                        }
                    }
                    whenConfigured { pom ->
                        def junitDep = pom.dependencies.find { dep -> dep.groupId == 'junit' && dep.artifactId == 'junit' }
                        if (junitDep != null) {
                            junitDep.with {
                                version = '[4.9,4.12]'
                                scope = 'provided'
                            }
                        }
                        pom.dependencies.removeAll(pom.dependencies.findAll { dep -> dep.scope in ['test'] })
                    }
                }
            }
        }
    }

    // to be able use project.description which may be overridden in later executed build.gradle of subproject
    project.afterEvaluate {
        uploadArchives.repositories {
            mavenDeployer.pom.project {
                description = project.description
            }
        }
    }

    uploadArchives.onlyIf {
        !(isCI && isReleaseVersion)
    }

    uploadArchives.doFirst {
        if (!isCI && isReleaseVersion && !JavaVersion.current().isJava8Compatible()) {
            throw new GradleException("Releases have to be done with Java 8");
        }
    }

    idea {
        module {
            downloadSources = true
            downloadJavadoc = true
        }
    }
}

task overallJacocoReport(type: JacocoReport) {
    getExecutionData().setFrom files("build/jacoco/jacocoTest.exec")
    getSourceDirectories().setFrom files("jgiven-core/src/main/java")
    getClassDirectories().setFrom files("jgiven-core/build/classes/main")
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

overallJacocoReport.dependsOn {
    subprojects*.test
}

coveralls.jacocoReportPath = 'build/reports/jacoco/overallJacocoReport/overallJacocoReport.xml'
coveralls.sourceDirs = ["jgiven-core/src/main/java"]
coveralls.saveAsFile = true

