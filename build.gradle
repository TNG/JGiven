import java.util.stream.Collectors

//file:noinspection GroovyAssignabilityCheck
plugins {
    id 'com.github.kt3k.coveralls' version '2.12.2'
    id 'org.asciidoctor.jvm.convert' version '4.0.2'
    id 'io.codearte.nexus-staging' version '0.30.0'
    id 'com.github.ben-manes.versions' version '0.51.0'
    id 'com.github.node-gradle.node' version '7.0.2' apply false
}

apply plugin: 'project-report'

description = 'JGiven - BDD in plain Java'
def jacocoEnabled = !JavaVersion.current().isJava12Compatible()
def timingEnabled = System.getenv("JGivenTiming")

allprojects {
    group = 'com.tngtech.jgiven'
    version = version
    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
    if (jacocoEnabled) {
        apply plugin: 'jacoco'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        google()
    }

    tasks.withType(Javadoc).configureEach {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    ext.sonatypeUsername = (rootProject.hasProperty('sonatypeUsername')) ?
            rootProject.sonatypeUsername :
            System.getenv().getOrDefault("SONATYPE_USERNAME", "")
    ext.sonatypePassword = (rootProject.hasProperty('sonatypePassword')) ?
            rootProject.sonatypePassword :
            System.getenv().getOrDefault("SONATYPE_PASSWORD", "")

    configurations.configureEach {
        resolutionStrategy.capabilitiesResolution.withCapability('com.google.collections:google-collections') {
            def toBeSelected = candidates.find { cvi -> cvi.id instanceof ModuleComponentIdentifier && cvi.id.group == 'com.google.guava' && cvi.id.module == 'guava' }
            if (toBeSelected != null) {
                select(toBeSelected)
            }
        }
    }
}

asciidoctor {
    baseDir = file('docs')
    sourceDir = file('docs')
    attributes 'version': version
}


nexusStaging {
    stagingProfileId = stagingProfileId // stagingProfileId must be defined externally
    packageGroup = 'com.tngtech'
    username = sonatypeUsername
    password = sonatypePassword
    numberOfRetries = 100
}

subprojects {
    ext {
        androidCompileSdkVersion = 33
        androidMinSdkVersion = 29
        androidTargetSdkVersion = 32


        publishVariant = { String variant ->
            publishing {
                publications {
                    maven(MavenPublication) {
                        from components[variant]
                        pom {
                            name = project.name
                            url = 'https://jgiven.org'
                            // to be able use project.description which may be overridden in later executed build.gradle of subproject
                            afterEvaluate {
                                description = project.description
                            }
                            withXml {
                                project.configurations.compileOnly.allDependencies.each { dep ->
                                    asNode().dependencies[0].appendNode('dependency').with { dependencyNode ->
                                        dependencyNode.appendNode('groupId', dep.group)
                                        dependencyNode.appendNode('artifactId', dep.name)
                                        if (dep.version != null && dep.version.trim() != "") {
                                            dependencyNode.appendNode('version', dep.version)
                                        }
                                        dependencyNode.appendNode('scope', 'provided')
                                    }
                                }

                            }

                            scm {
                                url = 'scm:git@github.com:TNG/jgiven.git'
                                connection = 'scm:git@github.com:TNG/jgiven.git'
                                developerConnection = 'scm:git@github.com:TNG/jgiven.git'
                            }

                            licenses {
                                license {
                                    name = 'The Apache Software License, Version 2.0'
                                    url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                                    distribution = 'repo'
                                }
                            }

                            developers {
                                developer {
                                    id = 'janschaefer'
                                    name = 'Jan SchÃ¤fer'
                                }
                                developer {
                                    id = 'l-1squared'
                                    name = 'Kristof Karhan'
                                }
                            }

                        }
                    }
                }
                repositories {
                    maven {
                        String releaseUrl = project["mavenRepo.releaseUrl"]
                        String snapshotUrl = project["mavenRepo.snapshotUrl"]
                        url = System.env.RELEASE == "true" ? releaseUrl : snapshotUrl
                        credentials {
                            username = sonatypeUsername
                            password = sonatypePassword
                        }
                    }
                }
            }
        }
    }
}

configure(subprojects.findAll { !it.name.contains("android") }) {
    apply plugin: 'java'
    apply plugin: 'org.asciidoctor.jvm.convert'
    apply plugin: 'maven-publish'

    dependencies {
        implementation libs.slf4j.api

        testImplementation libs.bundles.junit4
        testImplementation libs.slf4j.java.util.logging
        testImplementation libs.assertj
        testImplementation libs.quickcheck
    }

    if (timingEnabled) {
        dependencies {
            testImplementation project(':jgiven-timing')
        }
        test {
            jvmArgs += "-javaagent:${rootProject.projectDir}/jgiven-timing/build/libs/jgiven-timing-1.1.0.jar"
        }
    }

    test {
        systemProperty 'jgiven.report.dir', 'build/reports/jgiven/json'
        systemProperty 'jgiven.report.text', 'false'

        if (jacocoEnabled) {
            jacoco {
                destinationFile = file("${rootProject.projectDir}/build/jacoco/jacocoTest.exec")
                classDumpDir = file("${rootProject.projectDir}/build/jacoco/classpathdumps")
            }
        }

        testLogging {
            showStandardStreams = true
        }
    }

    tasks.withType(JavaCompile).configureEach {
        // needed for DeSzenarioTest.java as it has Umlauts in the code
        options.encoding = 'UTF-8'
    }

    tasks.withType(Jar) {
        def now = new Date()
        manifest {
            attributes(
                'Built-By'              : "Gradle ${gradle.gradleVersion}",
                'Build-Date'            : now.format('yyyy-MM-dd HH:mm:ss.S'),
                'Copyright'             : "2013-" + now.format('yyyy') + " TNG Technology Consulting GmbH",
                'Implementation-Title'  : project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor' : 'TNG Technology Consulting GmbH',
                'License'               : 'Apache License v2.0, January 2004',
                'Specification-Title'   : project.name,
                'Specification-Version' : project.version,
                'Specification-Vendor'  : 'TNG Technology Consulting GmbH',
                'Automatic-Module-Name' : "com.tngtech.jgiven.${project.name.replaceAll("-", ".").replace("jgiven.", "")}"
            )
        }
    }

    normalization {
        runtimeClasspath {
            ignore "META-INF/MANIFEST.MF"
        }
    }

    javadoc {
        exclude '**/impl/**'

        onlyIf {
            JavaVersion.current().isJava8Compatible()
        }
    }

    java {
        sourceCompatibility = targetCompatibility = JavaVersion.VERSION_11
        withJavadocJar()
        withSourcesJar()
    }

    if (jacocoEnabled) {
        jacocoTestReport {
            reports {
                xml.required = true // coveralls plugin depends on xml format report
            }
        }
    }

    tasks.register("jgivenHtml5Report", JavaExec) {
        //noinspection GroovyAccessibility
        mainClass = 'com.tngtech.jgiven.report.ReportGenerator'
        args '--sourceDir=build/reports/jgiven/json',
                '--targetDir=build/reports/jgiven/html5',
                '--format=html5',
                '--exclude-empty-scenarios=true',
                '--customcss=build/resources/test/jgiven/custom.css',
                '--show-thumbnails=true'

        classpath = configurations.testRuntimeClasspath
    }

    tasks.register("jgivenAsciiDocReport",JavaExec) {
        //noinspection GroovyAccessibility
        mainClass = 'com.tngtech.jgiven.report.ReportGenerator'
        args '--sourceDir=build/reports/jgiven/json',
                '--targetDir=build/reports/jgiven/asciidoc',
                '--format=asciidoc',
                '--exclude-empty-scenarios=true',
                '--title=JGiven Report'

        classpath = configurations.testRuntimeClasspath
    }

    asciidoctor {
        sourceDir = new File('build/reports/jgiven/asciidoc')
        outputDir = new File('build/reports/jgiven/htmladoc')
        attributes toc: ''
    }

    tasks.register("copyAsciiDoc", Copy, ) {
        dependsOn += jgivenAsciiDocReport
        from 'src/asciidoc'
        into 'build/reports/jgiven/asciidoc'
    }

    copyAsciiDoc.finalizedBy(asciidoctor)

    project.ext.publishVariant('java')
}

configure(subprojects) { subproject ->
    apply plugin: 'checkstyle'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'

    description "${rootProject.description} - Module ${project.name}"

    checkstyle {
        toolVersion = "10.14.1"
        configFile = file("${rootProject.projectDir}/checkstyle.xml")
        showViolations = false
        ignoreFailures = true
    }

    // -- build and publish artifacts -------------------------------------------------------------------------------------

    signing {

        // requires gradle.properties, see http://www.gradle.org/docs/current/userguide/signing_plugin.html
        logger.debug("Task graph at signing:" + gradle.taskGraph.getAllTasks().stream().map(Task::getName).collect(Collectors.toList()))
        required {
            isReleaseVersion && gradle.taskGraph.getAllTasks().any { it instanceof PublishToMavenRepository }
        }
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications
    }

    idea {
        module {
            downloadSources = true
            downloadJavadoc = true
        }
    }
}

tasks.register("overallJacocoReport", JacocoReport) {
    getExecutionData().setFrom files("build/jacoco/jacocoTest.exec")
    getSourceDirectories().setFrom files("jgiven-core/src/main/java")
    getClassDirectories().setFrom files("jgiven-core/build/classes/main")
    reports {
        xml.getRequired().set(true) // coveralls plugin depends on xml format report
        html.getRequired().set(true)
    }
}

overallJacocoReport.dependsOn {
    subprojects*.test
}

coveralls.jacocoReportPath = 'build/reports/jacoco/overallJacocoReport/overallJacocoReport.xml'
coveralls.sourceDirs = ["jgiven-core/src/main/java"]
coveralls.saveAsFile = true
