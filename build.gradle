buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        google()
    }
    dependencies {
        classpath libs.androidGradlePlugin
    }
}
//file:noinspection GroovyAssignabilityCheck
plugins {
    id 'com.github.kt3k.coveralls' version '2.12.2'
    id 'org.asciidoctor.jvm.convert' version '4.0.5'
    id("com.vanniktech.maven.publish") version libs.versions.vanniktech.version apply false
    id 'com.github.ben-manes.versions' version '0.53.0'
    id 'com.github.node-gradle.node' version '7.1.0' apply false
}

apply plugin: 'project-report'

description = 'JGiven - BDD in plain Java'
def jacocoEnabled = !JavaVersion.current().isJava12Compatible()
def timingEnabled = System.getenv("JGivenTiming")

allprojects {
    group = 'com.tngtech.jgiven'
    version = version
    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
    if (jacocoEnabled) {
        apply plugin: 'jacoco'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        google()
    }

    tasks.withType(Javadoc).configureEach {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    configurations.configureEach {
        resolutionStrategy.capabilitiesResolution.withCapability('com.google.collections:google-collections') {
            def toBeSelected = candidates.find { cvi -> cvi.id instanceof ModuleComponentIdentifier && cvi.id.group == 'com.google.guava' && cvi.id.module == 'guava' }
            if (toBeSelected != null) {
                select(toBeSelected)
            }
        }
    }
}

asciidoctor {
    baseDir = file('docs')
    sourceDir = file('docs')
    attributes 'version': version
}

subprojects {
    ext {
        androidCompileSdkVersion = 34
        androidMinSdkVersion = 29
        androidTargetSdkVersion = 32
    }
}

configure(subprojects.findAll { !it.name.contains("android") }) {
    apply plugin: 'java'
    apply plugin: 'org.asciidoctor.jvm.convert'

    dependencies {
        implementation libs.slf4j.api

        testImplementation libs.bundles.junit4
        testImplementation libs.slf4j.java.util.logging
        testImplementation libs.assertj
        testImplementation libs.quickcheck
    }

    if (timingEnabled) {
        dependencies {
            testImplementation project(':jgiven-timing')
        }
        test {
            jvmArgs += "-javaagent:${rootProject.projectDir}/jgiven-timing/build/libs/jgiven-timing-1.1.0.jar"
        }
    }

    test {
        systemProperty 'jgiven.report.dir', 'build/reports/jgiven/json'
        systemProperty 'jgiven.report.text', 'false'

        if (jacocoEnabled) {
            jacoco {
                destinationFile = file("${rootProject.projectDir}/build/jacoco/jacocoTest.exec")
                classDumpDir = file("${rootProject.projectDir}/build/jacoco/classpathdumps")
            }
        }

        testLogging {
            showStandardStreams = true
        }
    }

    tasks.withType(JavaCompile).configureEach {
        // needed for DeSzenarioTest.java as it has Umlauts in the code
        options.encoding = 'UTF-8'
    }

    tasks.withType(Jar) {
        def now = new Date()
        manifest {
            attributes(
                    'Built-By': "Gradle ${gradle.gradleVersion}",
                    'Build-Date': now.format('yyyy-MM-dd HH:mm:ss.S'),
                    'Copyright': "2013-" + now.format('yyyy') + " TNG Technology Consulting GmbH",
                    'Implementation-Title': project.name,
                    'Implementation-Version': project.version,
                    'Implementation-Vendor': 'TNG Technology Consulting GmbH',
                    'License': 'Apache License v2.0, January 2004',
                    'Specification-Title': project.name,
                    'Specification-Version': project.version,
                    'Specification-Vendor': 'TNG Technology Consulting GmbH',
                    'Automatic-Module-Name': "com.tngtech.jgiven.${project.name.replaceAll("-", ".").replace("jgiven.", "")}"
            )
        }
    }

    normalization {
        runtimeClasspath {
            ignore "META-INF/MANIFEST.MF"
        }
    }

    javadoc {
        exclude '**/impl/**'

        onlyIf {
            JavaVersion.current().isJava8Compatible()
        }
    }

    java {
        sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17
    }

    if (jacocoEnabled) {
        jacocoTestReport {
            reports {
                xml.required = true // coveralls plugin depends on xml format report
            }
        }
    }

    tasks.register("jgivenHtml5Report", JavaExec) {
        //noinspection GroovyAccessibility
        mainClass = 'com.tngtech.jgiven.report.ReportGenerator'
        args '--sourceDir=build/reports/jgiven/json',
                '--targetDir=build/reports/jgiven/html5',
                '--format=html5',
                '--exclude-empty-scenarios=true',
                '--customcss=build/resources/test/jgiven/custom.css',
                '--show-thumbnails=true'

        classpath = configurations.testRuntimeClasspath
    }

    tasks.register("jgivenAsciiDocReport", JavaExec) {
        //noinspection GroovyAccessibility
        mainClass = 'com.tngtech.jgiven.report.ReportGenerator'
        args '--sourceDir=build/reports/jgiven/json',
                '--targetDir=build/reports/jgiven/asciidoc',
                '--format=asciidoc',
                '--exclude-empty-scenarios=true',
                '--title=JGiven Report'

        classpath = configurations.testRuntimeClasspath
    }

    tasks.register("jgivenPlainTextReport", JavaExec) {
        //noinspection GroovyAccessibility
        mainClass = 'com.tngtech.jgiven.report.ReportGenerator'
        args '--sourceDir=build/reports/jgiven/json',
                '--targetDir=build/reports/jgiven/text',
                '--format=text',
                '--exclude-empty-scenarios=true',
                '--title=JGiven Report'

        classpath = configurations.testRuntimeClasspath
    }

    asciidoctor {
        sourceDir = new File('build/reports/jgiven/asciidoc')
        outputDir = new File('build/reports/jgiven/htmladoc')
        attributes toc: ''
    }

    tasks.register("copyAsciiDoc", Copy,) {
        dependsOn += jgivenAsciiDocReport
        from 'src/asciidoc'
        into 'build/reports/jgiven/asciidoc'
    }

    copyAsciiDoc.finalizedBy(asciidoctor)
}

configure(subprojects) { subproject ->
    apply plugin: 'checkstyle'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    description = "${rootProject.description} - Module ${project.name}"

    checkstyle {
        toolVersion = "11.1.0"
        configFile = file("${rootProject.projectDir}/checkstyle.xml")
        showViolations = false
        ignoreFailures = true
    }


    idea {
        module {
            downloadSources = true
            downloadJavadoc = true
        }
    }
}

tasks.register("overallJacocoReport", JacocoReport) {
    getExecutionData().setFrom files("build/jacoco/jacocoTest.exec")
    getSourceDirectories().setFrom files("jgiven-core/src/main/java")
    getClassDirectories().setFrom files("jgiven-core/build/classes/main")
    reports {
        xml.getRequired().set(true) // coveralls plugin depends on xml format report
        html.getRequired().set(true)
    }
}

overallJacocoReport.dependsOn {
    subprojects*.test
}

coveralls.jacocoReportPath = 'build/reports/jacoco/overallJacocoReport/overallJacocoReport.xml'
coveralls.sourceDirs = ["jgiven-core/src/main/java"]
coveralls.saveAsFile = true
