import java.util.stream.Collectors

plugins {
    id "java-gradle-plugin"
}

description = 'JGiven Maven Mojo'

dependencies {
    implementation project(':jgiven-core')
    implementation project(':jgiven-html5-report')
    implementation "org.apache.maven.plugin-tools:maven-plugin-tools-api:3.10.2"
    implementation "org.apache.maven.plugin-tools:maven-plugin-annotations:3.10.2"

    testImplementation project(':jgiven-html5-report')

    testImplementation(platform(libs.junit.bom))
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.platform:junit-platform-runner'
    testImplementation 'org.apache.maven.shared:maven-invoker:3.2.0'
}

test {
    useJUnitPlatform()
}

tasks.register('copyClasses', Copy) {
    dependsOn(compileJava)
    from 'build/classes/java/main'
    into 'build/maven/target/classes'
}

tasks.register('generatePom', Copy) {
    dependsOn(copyClasses)
    from 'src/main/maven'
    into 'build/maven'
    filesMatching("**/pom.*") {
        expand(version: project.version)
    }
}

tasks.register('generateMavenPlugin', CrossPlatformExec) {
    dependsOn(generatePom)
    // currently it seems to be the more or less only clean solution
    // to generate a plugin.xml file to use maven directly
    // if anyone has a better solution please let us know!
    buildCommand 'mvn', '-nsu', '-U', '-f', 'build/maven/pom.xml', 'plugin:descriptor', '--batch-mode',
            '-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn'
}

generateMavenPlugin.configure {
    List<Task> thisProjectsPublishTasks = getTasks().withType(PublishToMavenLocal).stream().collect(Collectors.toList())
    mustRunAfter(rootProject.getAllTasks(true).values().stream()
            .flatMap(Set::stream)
            .filter(task -> task instanceof PublishToMavenLocal)
            .filter(task -> !thisProjectsPublishTasks.contains(task))
            .collect(Collectors.toList())
    )
    onlyIf {
        println("taskGraph: " + gradle.taskGraph.getAllTasks().stream().map(Task::getName).collect(Collectors.toList()))
        gradle.taskGraph.getAllTasks().stream().anyMatch(thisProjectsPublishTasks::contains)
    }
}

jar.configure {
    dependsOn(generateMavenPlugin)
    dependsOn(generatePom)
    javadoc.dependsOn += it
    doFirst {
        copy {
            from('build/maven') {
                include '**/pom.*'
                filter { line ->
                    line.replaceAll("<version>.*</version>", "")
                }
            }
            into 'build/classes/main/META-INF/maven/com.tngtech.jgiven/jgiven-maven-plugin'
            includeEmptyDirs = false
        }
        copy {
            from('build/maven/target/classes') {
                include '**/*.xml'
                exclude '**/*.class'
            }
            into 'build/classes/java/main'
        }
    }
}

class CrossPlatformExec extends Exec {
    void buildCommand(String command, String... commandArgs) {
        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            executable = 'cmd'
            args = ['/c', command]
        } else {
            executable = command
        }
        args(commandArgs.toList())
    }
}
